rel.abund = cum.abund / tot)
# plot family abundance
ggplot(families.overview, aes(y = reorder(family, -cum.abund), x = cum.abund)) +
geom_bar(stat = "identity") + theme_classic()
# use cumulative abundance to select 30 most abundant species
rare.families <- families.overview %>%
top_n(nrow(families.overview) - 30, -cum.abund)
BB22.full$family.agg <- BB22.full$family
# group all rare families into "other families"
for(h in rare.families$family) {
for(i in 1:nrow(BB22.full)) {
if(BB22.full$family.agg[i] == h) {
BB22.full$family.agg[i] <- "Other families"
}
} # end loop i
} # end loop h
# 2. produce data frame with families' abundances per site with leg pollen
families.site <- BB22.full %>%
dplyr::group_by(family.agg, site, bbspecies) %>%
dplyr::summarise(cum.abund = sum(Abundance))
families.site$family.agg <- as.factor(families.site$family.agg)
# 3. plot families per site
# color palette for families
palette.fams = c("#07575B", "#5D535E", "#C4DFE6", "#336B87", "#FAAF08", "#DFE166", "#1995AD",
"#4897D8", "#80BD9E", "#FA812F", "#66A5AD", "#F34A4A", "#375E97", "#258039",
"#73605B", "#DDBC95", "#A3A599", "#A1D6E2", "#88A550", "#75B1A9", "#D9B44A",
"#4F6457", "#ACD0C0", "#0F1B07", "#F7EFE2", "#D09683", "#F62A00", "#A1BE95",
"#20948B", "#9B4F0F", "#CB0000")
# 4. produce data frame with families' abundances per region
families.region <- BB22.full %>%
dplyr::group_by(family.agg, region, bbspecies) %>%
dplyr::summarise(cum.abund = sum(Abundance))
families.region$family.agg <- as.factor(families.region$family.agg)
### FIGURE S5 ####
# 5. plot families per region
setwd(output)
ggplot(families.region, aes(fill = family.agg, y = cum.abund, x = region)) +
geom_bar(position="fill", stat="identity") +
theme_classic(base_size = 20) +
facet_wrap(~bbspecies) +
ggtitle("Plant families per region") +
labs(fill = 'Plant families',
x = "regions",
y = "relative abundance") +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_manual(values = palette.fams,
name = "Plant families")
ggsave(paste("./diet pattern/pollen composition/PlantFamilies_per_Region.png", sep = ""),
width = 16, height = 8, device = "png", )
setwd(input)
### origin status per site, region and species ----
# 1. produce data frame with exotic/native per site
ex.nat.site <- BB22.full %>%
dplyr::group_by(native_exotic, site, bbspecies) %>%
dplyr::summarise(abund = sum(binom.abund))
ex.nat.site$native_exotic <- as.factor(ex.nat.site$native_exotic)
# 2. plot native/exotic per site
# create color palette
palette.ex =c("#518A45", "#BDA509")
# 3. produce data frame with exotic/native per region
ex.nat.region <- BB22.full %>%
dplyr::group_by(native_exotic, region, bbspecies) %>%
dplyr::summarise(abund = sum(binom.abund))
ex.nat.region$native_exotic <- as.factor(ex.nat.region$native_exotic)
### FIGURE S6c ####
# 4. plot native/exotic per region
setwd(output)
ggplot(ex.nat.region, aes(fill = native_exotic, y = abund, x = region)) +
geom_bar(position="fill", stat="identity") +
theme_classic(base_size = 20) +
facet_wrap(~bbspecies) +
ggtitle("Origin status per region LEG") +
ylab("Proportion of species in the pollen") +
labs(fill='Origin status') +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_manual(values = palette.ex,
labels = c('Exotic', 'Native'),
name = "")
ggsave(paste("./diet pattern/pollen composition/OriginStatus_per_Region.png", sep = ""),
width = 16, height = 8)
setwd(input)
### growth form per site, region and species ----
# 1. produce data frame with growth form per site
growth.site <- BB22.full %>%
dplyr::group_by(growth_form_category, site, bbspecies) %>%
dplyr::summarise(abund = sum(binom.abund))
growth.site$growth_form_category <- as.factor(growth.site$growth_form_category)
# 2. plot growth form per site
# create color palette
palette.growth =c("#375E97", "#518A45", "#FA812F", "#F34A4A", "#5A99AD", "#A3A3A3")
# 3. produce data frame with growth form per region
growth.region <- BB22.full %>%
dplyr::group_by(growth_form_category, region, bbspecies) %>%
dplyr::summarise(abund = sum(binom.abund))
growth.region$growth_form_category <- as.factor(growth.region$growth_form_category)
### FIGURE S6b ####
# 4. plot growth form per region
setwd(output)
ggplot(growth.region, aes(fill = growth_form_category, y = abund, x = region)) +
geom_bar(position = "fill", stat = "identity") +
theme_classic(base_size = 20) +
facet_wrap(~bbspecies) +
ggtitle("Growth Form LEG") +
ylab("Proportion of species in the pollen") +
labs(fill='Growth form') +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_manual(values = palette.growth, name = "")
ggsave(paste("./diet pattern/pollen composition/GrowthForm_per_Region.png", sep = ""),
width = 16, height = 8)
setwd(input)
### blossom class per site, region and species ----
# 1. produce data frame with blossom class per site
blossom.site <- BB22.full %>%
dplyr::group_by(structural_blossom_class, site, bbspecies) %>%
dplyr::summarise(abund = sum(binom.abund))
blossom.site$structural_blossom_class <- as.factor(blossom.site$structural_blossom_class)
# 2. plot blossom class per site
# create color palette
palette.bloss=c("#375E97", "#80BD9E", "#FA812F", "#758A30", "#07575B", "#D95F56", "#C4DFE6")
# 3. produce data frame with blossom class per region
blossom.region <- BB22.full %>%
dplyr::group_by(structural_blossom_class, region, bbspecies) %>%
dplyr::summarise(abund = sum(binom.abund))
blossom.region$structural_blossom_class <- as.factor(blossom.region$structural_blossom_class)
### FIGURE S6a ####
# 4. plot blossom class per region
setwd(output)
ggplot(blossom.region, aes(fill = structural_blossom_class, y = abund, x = region)) +
geom_bar(position = "fill", stat = "identity") +
theme_classic(base_size = 20) +
facet_wrap(~bbspecies) +
ggtitle("Blossom Class per site LEG") +
ylab("Proportion of species in the pollen") +
labs(fill='Blossom Class') +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_manual(values = palette.bloss,
labels = c('Bell Trumpet', 'Brush', "Dish Bowl",
"Flag", "Gullet", "Stalk Disk", "Tube"),
name = "")
ggsave(paste("./diet pattern/pollen composition/BlossomClass_per_Region.png", sep = ""),
width = 16, height = 8)
setwd(input)
# TEST FAMILY, FLOWER, GRWOTH FORM, EXOTIC/NATIVE PROPORTIONS URBAN vs. RURAL ----
## preparation ----
# clear work environment
rm(list = ls())
#load libraries
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(insight)
# set working directory to main repository
input <- "~/Library/CloudStorage/GoogleDrive-simo1996s@gmail.com/My Drive/ETH/Master Thesis/bumblebee_try/01_DATA"
output <- "~/Library/CloudStorage/GoogleDrive-simo1996s@gmail.com/My Drive/ETH/Master Thesis/bumblebee_try/03_OUTPUT"
setwd(input)
# import data (added row with information on family)
BB22.full.family <- read_csv("BB22.full.family")
BB.pasc <- BB22.full.family %>%
filter(bbspecies == "B.pascuorum")
BB.lapi <- BB22.full.family %>%
filter(bbspecies == "B.lapidarius")
# reset environment
rm(list = ls())
#load libraries
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
# set working directory to main repository
input <- "~/Library/CloudStorage/GoogleDrive-simo1996s@gmail.com/My Drive/ETH/Master Thesis/bumblebee_try/01_DATA"
output <- "~/Library/CloudStorage/GoogleDrive-simo1996s@gmail.com/My Drive/ETH/Master Thesis/bumblebee_try/03_OUTPUT"
# load data
setwd(input) # set working directory
BB22.full <- read_csv("BB22_full.csv") # import data set
# initialize region as column
BB22.full$region <- c()
# add site and region as columns
for (i in 1:nrow(BB22.full)) {
BB22.full$site[i] <- paste(BB22.full$location[i], BB22.full$landscape[i], BB22.full$replicate[i], sep = "")
BB22.full$region[i] <- paste(BB22.full$location[i], BB22.full$landscape[i], sep = "")
}
## analysis ----
# divide data set into leg and body pollen
BB22.full.leg <- BB22.full[BB22.full$bborgan == "L", ]
BB22.full.body <- BB22.full[BB22.full$bborgan == "B", ]
# 1. find the 30 most abundant families
families.overview <- BB22.full %>%
dplyr::group_by(family) %>%
dplyr::summarise(cum.abund = sum(Abundance))
tot <- sum(families.overview$cum.abund)
families.overview <- families.overview %>%
dplyr::summarise(family = family,
cum.abund = cum.abund,
rel.abund = cum.abund / tot)
# plot family abundance
ggplot(families.overview, aes(y = reorder(family, -cum.abund), x = cum.abund)) +
geom_bar(stat = "identity") + theme_classic()
# use cumulative abundance to select 30 most abundant species
rare.families <- families.overview %>%
top_n(nrow(families.overview) - 30, -cum.abund)
BB22.full$family.agg <- BB22.full$family
# group all rare families into "other families"
for(h in rare.families$family) {
for(i in 1:nrow(BB22.full)) {
if(BB22.full$family.agg[i] == h) {
BB22.full$family.agg[i] <- "Other families"
}
} # end loop i
} # end loop h
# export data set with new family categories
write_csv(BB22.full, "BB22.full.family")
# TEST FAMILY, FLOWER, GRWOTH FORM, EXOTIC/NATIVE PROPORTIONS URBAN vs. RURAL ----
## preparation ----
# clear work environment
rm(list = ls())
#load libraries
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(insight)
# set working directory to main repository
input <- "~/Library/CloudStorage/GoogleDrive-simo1996s@gmail.com/My Drive/ETH/Master Thesis/bumblebee_try/01_DATA"
output <- "~/Library/CloudStorage/GoogleDrive-simo1996s@gmail.com/My Drive/ETH/Master Thesis/bumblebee_try/03_OUTPUT"
setwd(input)
# import data (added row with information on family)
BB22.full.family <- read_csv("BB22.full.family")
BB.pasc <- BB22.full.family %>%
filter(bbspecies == "B.pascuorum")
BB.lapi <- BB22.full.family %>%
filter(bbspecies == "B.lapidarius")
# define vectors to loop over
resolution <- c("landscape", "region", "site")
fun.trait <- c("family.agg", "native_exotic", "growth_form_category", "structural_blossom_class")
### B.pascuorum ----
chisq.summary <- NULL
for (i in resolution) {
for (j in fun.trait) {
chisq <- chisq.test(BB.pasc[[i]], BB.pasc[[j]])
chisq
summary <- c(paste(i, j, sep = "~"), round(chisq$statistic, 3), chisq$parameter, chisq$p.value)
chisq.summary <- rbind(chisq.summary, summary)
} # end loop j
} # end loop i
chisq.summary <- as.data.frame(chisq.summary)
colnames(chisq.summary) <- c("formula", "X-squared", "df", "p")
rownames(chisq.summary) <- NULL
chisq.summary <- chisq.summary %>%
mutate(p = format_p(p, stars = TRUE)) %>%
format_table()
# export the summary of the tests
write.table(chisq.summary, file = "chisq_Bpascuorum.txt", sep = "\t", row.names = TRUE, col.names = NA)
### B.lapidarius ----
chisq.summary.1 <- NULL
for (i in resolution) {
for (j in fun.trait) {
chisq <- chisq.test(BB.lapi[[i]], BB.lapi[[j]])
chisq
summary <- c(paste(i, j, sep ="~"), round(chisq$statistic, 3),chisq$parameter,chisq$p.value)
chisq.summary.1 <- rbind(chisq.summary.1, summary)
} # end loop j
} # end loop i
chisq.summary.1 <- as.data.frame(chisq.summary.1)
colnames(chisq.summary.1) <- c("formula", "X-squared", "df", "p")
rownames(chisq.summary.1) <- NULL
chisq.summary.1 <- chisq.summary.1 %>%
mutate(p = format_p(p, stars = TRUE)) %>%
format_table()
# export the summary of the tests
write.table(chisq.summary.1, file = "chisq_Blapidarius.txt",
sep = "\t", row.names = TRUE, col.names = NA)
write.table(chisq.summary.1, file = "diet pattern/chisq tests/chisq_Blapidarius.txt",
sep = "\t", row.names = TRUE, col.names = NA)
# export the summary of the tests
setwd(output)
write.table(chisq.summary.1, file = "diet pattern/chisq tests/chisq_Blapidarius.txt",
sep = "\t", row.names = TRUE, col.names = NA)
setwd(input)
# TEST FAMILY, FLOWER, GRWOTH FORM, EXOTIC/NATIVE PROPORTIONS URBAN vs. RURAL ----
## preparation ----
# clear work environment
rm(list = ls())
#load libraries
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(insight)
# set working directory to main repository
input <- "~/Library/CloudStorage/GoogleDrive-simo1996s@gmail.com/My Drive/ETH/Master Thesis/bumblebee_try/01_DATA"
output <- "~/Library/CloudStorage/GoogleDrive-simo1996s@gmail.com/My Drive/ETH/Master Thesis/bumblebee_try/03_OUTPUT"
setwd(input)
# import data (added row with information on family)
BB22.full.family <- read_csv("BB22.full.family")
BB.pasc <- BB22.full.family %>%
filter(bbspecies == "B.pascuorum")
BB.lapi <- BB22.full.family %>%
filter(bbspecies == "B.lapidarius")
# define vectors to loop over
resolution <- c("landscape", "region", "site")
fun.trait <- c("family.agg", "native_exotic", "growth_form_category", "structural_blossom_class")
### B.pascuorum ----
chisq.summary <- NULL
for (i in resolution) {
for (j in fun.trait) {
chisq <- chisq.test(BB.pasc[[i]], BB.pasc[[j]])
chisq
summary <- c(paste(i, j, sep = "~"), round(chisq$statistic, 3), chisq$parameter, chisq$p.value)
chisq.summary <- rbind(chisq.summary, summary)
} # end loop j
} # end loop i
chisq.summary <- as.data.frame(chisq.summary)
colnames(chisq.summary) <- c("formula", "X-squared", "df", "p")
rownames(chisq.summary) <- NULL
chisq.summary <- chisq.summary %>%
mutate(p = format_p(p, stars = TRUE)) %>%
format_table()
# export the summary of the tests
setwd(output)
write.table(chisq.summary, file = "diet pattern/chisq tests/chisq_Bpascuorum.txt",
sep = "\t", row.names = TRUE, col.names = NA)
setwd(input)
### B.lapidarius ----
chisq.summary.1 <- NULL
for (i in resolution) {
for (j in fun.trait) {
chisq <- chisq.test(BB.lapi[[i]], BB.lapi[[j]])
chisq
summary <- c(paste(i, j, sep ="~"), round(chisq$statistic, 3),chisq$parameter,chisq$p.value)
chisq.summary.1 <- rbind(chisq.summary.1, summary)
} # end loop j
} # end loop i
chisq.summary.1 <- as.data.frame(chisq.summary.1)
colnames(chisq.summary.1) <- c("formula", "X-squared", "df", "p")
rownames(chisq.summary.1) <- NULL
chisq.summary.1 <- chisq.summary.1 %>%
mutate(p = format_p(p, stars = TRUE)) %>%
format_table()
# export the summary of the tests
setwd(output)
write.table(chisq.summary.1, file = "diet pattern/chisq tests/chisq_Blapidarius.txt",
sep = "\t", row.names = TRUE, col.names = NA)
setwd(input)
## preparation ----
# clear work environment
rm(list = ls())
#load libraries
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggpubr)
# set working directory to main repository
input <- "~/Library/CloudStorage/GoogleDrive-simo1996s@gmail.com/My Drive/ETH/Master Thesis/bumblebee_try/01_DATA"
output <- "~/Library/CloudStorage/GoogleDrive-simo1996s@gmail.com/My Drive/ETH/Master Thesis/bumblebee_try/03_OUTPUT"
setwd(input)
# import species lists form GBIF and InfoFlora (file data preparation)
site.list.occ <- readRDS("sp_list_gbif_infoflora.RData")
# load data on pollen (file file data preparation)
site.list.bb <- readRDS("site_list_bb.RData")
# combine occurrence data with species found in pollen per site
site.list <- list()
sitenames <- c("ZHUA", "ZHUB", "ZHUC", "ZHRD", "ZHRE", "ZHRF", "BEUA", "BEUB",
"BEUC", "BERD", "BSUA", "BSUB", "BSUC", "BSRD", "BSRE", "BSRF")
for (i in sitenames) {
x <- as.factor(site.list.occ [[i]])
y <- as.factor(site.list.bb [[i]])
site.list[[i]] <- unique(c(x,y)) %>%
droplevels()
}
# calculate mean of number of species per site
mean.landsacpe <- c()
for (i in sitenames) {
temp <- c(substring(i, 3, 3), nlevels(site.list[[i]]))
mean.landsacpe <- rbind(mean.landsacpe, temp)
}
# adapt dataframe to be used with t-test
colnames(mean.landsacpe) <- c("landscape", "species_richness")
mean.landsacpe <- as.data.frame(mean.landsacpe)
mean.landsacpe$species_richness <- as.numeric(mean.landsacpe$species_richness)
str(mean.landsacpe)
# perform t-test and display it in a boxplot
library(rstatix)
w.test <- wilcox_test(mean.landsacpe, species_richness ~ landscape, paired = F)
palette.landscape <- c("#E69F00", "#56B4E9") #create color palette for landscape
a <- ggplot(mean.landsacpe, aes(x = landscape, y = species_richness,  fill = landscape)) +
geom_boxplot(notch = T) +
ylab("plant diversity of sites") +
xlab("") +
scale_x_discrete(labels = c('rural', 'urban')) +
theme_classic(base_size = 20) +
theme(aspect.ratio = 1) +
scale_fill_manual(values = palette.landscape,
guide = "none") +
labs(subtitle = paste("W = ", w.test$statistic, ", p = ", w.test$p, sep = ""))
a # print the plot
# compile species richness per site in dataframe
rich.occ <- c()
for (i in sitenames) {
x <- nlevels(site.list.occ[[i]])
rich.occ <- c(rich.occ, x)
}
rich.bb <- c()
for (i in sitenames) {
x <- nlevels(site.list.bb[[i]])
rich.bb <- c(rich.bb, x)
}
df.site <- data_frame(site = sitenames,
landscape = rep_len(c(rep("U", 3), rep("R", 3)), length(sitenames)),
rich.occ = rich.occ,
rich.bb = rich.bb)
# plot the relationship of species richness of data bases and species collected by the bumblebees
ggplot(df.site, aes(x = rich.occ, y = rich.bb)) +
geom_point()
# test the relationship with a model
fit <- lm(rich.occ ~ rich.bb, df.site)
summary(fit)
# plot it with information on the model
b <- ggplot(df.site, aes(x = rich.bb , y = rich.occ)) +
geom_point(aes(color = landscape), size = 3) +
labs(x ="species richness in pollen" ,
y = "plant diversity of sites") +
theme_classic(base_size = 20) +
theme(aspect.ratio = 1) +
geom_smooth(method = "lm",
se = FALSE,
col = "black") +
scale_color_manual(values = palette.landscape) +
stat_cor(
aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~")),
label.x = 3,
size = 7); b
# arrange them into one file to export
### FIGURE 3 ----
setwd(output)
ggarrange(a, b, ncol = 2, nrow = 1,
labels = c("A", "B"))
ggarrange(a, b, ncol = 2, nrow = 1,
labels = c("A", "B"))
a
w.test <- wilcox_test(mean.landsacpe, species_richness ~ landscape, paired = F)
palette.landscape <- c("#E69F00", "#56B4E9") #create color palette for landscape
a <- ggplot(mean.landsacpe, aes(x = landscape, y = species_richness,  fill = landscape)) +
geom_boxplot(notch = T) +
ylab("plant diversity of sites") +
xlab("") +
scale_x_discrete(labels = c('rural', 'urban')) +
theme_classic(base_size = 20) +
theme(aspect.ratio = 1) +
scale_fill_manual(values = palette.landscape,
guide = "none") +
labs(subtitle = paste("W = ", w.test$statistic, ", p = ", w.test$p, sep = ""))
a
ggplot(mean.landsacpe, aes(x = landscape, y = species_richness,  fill = landscape)) +
geom_boxplot(notch = T) +
ylab("plant diversity of sites") +
xlab("") +
scale_x_discrete(labels = c('rural', 'urban')) +
theme_classic(base_size = 20) +
theme(aspect.ratio = 1) +
scale_fill_manual(values = palette.landscape,
guide = "none") +
labs(subtitle = paste("W = ", w.test$statistic, ", p = ", w.test$p, sep = ""))
gplot(mean.landsacpe, aes(x = landscape, y = species_richness,  fill = landscape)) +
geom_boxplot(notch = T)
ggplot(mean.landsacpe, aes(x = landscape, y = species_richness,  fill = landscape)) +
geom_boxplot(notch = T)
mean.landsacpe
# calculate mean of number of species per site
mean.landsacpe <- c()
for (i in sitenames) {
temp <- c(substring(i, 3, 3), nlevels(site.list[[i]]))
mean.landsacpe <- rbind(mean.landsacpe, temp)
}
mean.landsacpe
# adapt dataframe to be used with t-test
colnames(mean.landsacpe) <- c("landscape", "species_richness")
mean.landsacpe <- as.data.frame(mean.landsacpe)
mean.landsacpe
as.data.frame(mean.landsacpe)
str(mean.landsacpe)
# calculate mean of number of species per site
mean.landsacpe <- c()
for (i in sitenames) {
temp <- c(substring(i, 3, 3), nlevels(site.list[[i]]))
mean.landsacpe <- rbind(mean.landsacpe, temp)
}
mean.landsacpe
# calculate mean of number of species per site
mean.landsacpe <- c()
for (i in sitenames) {
temp <- c(substring(i, 3, 3), nlevels(site.list[[i]]))
mean.landsacpe <- rbind(mean.landsacpe, temp)
}
# calculate mean of number of species per site
mean.landsacpe <- c()
for (i in sitenames) {
temp <- c(substring(i, 3, 3), nlevels(site.list[[i]]))
mean.landsacpe <- rbind(mean.landsacpe, temp)
}
mean.landsacpe
mean.landsacpe <- as.data.frame(mean.landsacpe)
mean.landsacpe <- as.data.frame(mean.landsacpe)
# calculate mean of number of species per site
mean.landsacpe <- c()
for (i in sitenames) {
temp <- c(substring(i, 3, 3), nlevels(site.list[[i]]))
mean.landsacpe <- rbind(mean.landsacpe, temp)
}
View(mean.landsacpe)
View(mean.landsacpe)
mean.landsacpe <- as.data.frame.matrix(mean.landsacpe)
